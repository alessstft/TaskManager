use sysinfo::{System, SystemExt, CpuExt, DiskExt, NetworkExt, ComponentExt, ProcessExt};
use local_ipaddress;
use std::process::Command;
use serde::Deserialize;
use serde_json;
use std::io;

// ==================== RAM ====================
struct MemoryInfo {
    speed: Option<u32>,
    memory_format: Option<String>,
}

fn get_modern_memory_format(smbios: Option<u32>, memory_type: Option<u32>) -> &'static str {
    if let Some(smbios_val) = smbios {
        if smbios_val != 0 {
            match smbios_val {
                20 => "DDR",
                21 => "DDR2",
                22 => "DDR2 FB-DIMM",
                24 => "DDR3",
                26 => "DDR4",
                34 => "DDR5",
                _  => "Unknown",
            }
        } else {
            if let Some(mem_val) = memory_type {
                match mem_val {
                    20 => "DDR",
                    21 => "DDR2",
                    22 => "DDR2 FB-DIMM",
                    24 => "DDR3",
                    _  => "Unknown",
                }
            } else {
                "Unknown"
            }
        }
    } else {
        if let Some(mem_val) = memory_type {
            match mem_val {
                20 => "DDR",
                21 => "DDR2",
                22 => "DDR2 FB-DIMM",
                24 => "DDR3",
                _  => "Unknown",
            }
        } else {
            "Unknown"
        }
    }
}

//
// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è Windows
//
#[cfg(target_os = "windows")]
#[derive(Deserialize, Debug)]
struct Win32PhysicalMemory {
    #[serde(rename = "Speed")]
    speed: Option<u32>,
    #[serde(rename = "MemoryType")]
    memory_type: Option<u32>,
    #[serde(rename = "SMBIOSMemoryType")]
    smbios_memory_type: Option<u32>,
}

#[cfg(target_os = "windows")]
fn get_ram_info() -> Result<Vec<MemoryInfo>, Box<dyn std::error::Error>> {
    let output = Command::new("powershell")
        .args(&[
            "-Command",
            "Get-CimInstance Win32_PhysicalMemory | Select-Object Speed, MemoryType, SMBIOSMemoryType | ConvertTo-Json -Compress"
        ])
        .output()?;
    
    if !output.status.success() {
        return Err("PowerShell command failed".into());
    }
    
    let output_str = String::from_utf8_lossy(&output.stdout);
    let json_str = if output_str.trim_start().starts_with('[') {
        output_str.to_string()
    } else {
        format!("[{}]", output_str)
    };
    
    let memories: Vec<Win32PhysicalMemory> = serde_json::from_str(&json_str)?;
    
    let mem_info: Vec<MemoryInfo> = memories.into_iter().map(|m| {
        let format = Some(get_modern_memory_format(m.smbios_memory_type, m.memory_type).to_string());
        MemoryInfo { speed: m.speed, memory_format: format }
    }).collect();
    
    Ok(mem_info)
}

//
// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è macOS
//
#[cfg(target_os = "macos")]
fn get_ram_info() -> Result<Vec<MemoryInfo>, Box<dyn std::error::Error>> {
    let output = Command::new("system_profiler")
        .args(&["SPMemoryDataType"])
        .output()?;
    
    if !output.status.success() {
        return Err("system_profiler command failed".into());
    }
    
    let output_str = String::from_utf8_lossy(&output.stdout);
    let mut infos = Vec::new();
    let mut current_speed: Option<u32> = None;
    let mut current_type: Option<String> = None;
    
    for line in output_str.lines() {
        let line = line.trim();
        if line.is_empty() {
            if current_speed.is_some() || current_type.is_some() {
                infos.push(MemoryInfo { speed: current_speed, memory_format: current_type.clone() });
                current_speed = None;
                current_type = None;
            }
            continue;
        }
        if line.starts_with("Speed:") {
            let value = line.trim_start_matches("Speed:").trim().replace("MHz", "").trim().to_string();
            if let Ok(num) = value.parse::<u32>() {
                current_speed = Some(num);
            }
        } else if line.starts_with("Type:") {
            let mem_type = line.trim_start_matches("Type:").trim();
            current_type = Some(mem_type.to_string());
        }
    }
    if current_speed.is_some() || current_type.is_some() {
        infos.push(MemoryInfo { speed: current_speed, memory_format: current_type });
    }
    
    Ok(infos)
}

//
// –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –û–°
//
#[cfg(not(any(target_os = "windows", target_os = "macos")))]
fn get_ram_info() -> Result<Vec<MemoryInfo>, Box<dyn std::error::Error>> {
    Err("Unsupported OS".into())
}

// ==================== GPU ====================

struct GPUInfo {
    model: String,
    total_memory: Option<f64>, // –≤ –ì–ë
    used_memory: Option<f64>,  // –≤ –ì–ë
    free_memory: Option<f64>,  // –≤ –ì–ë
    temperature: Option<u32>,  // –≤ ¬∞C
}

/// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ GPU —á–µ—Ä–µ–∑ nvidia-smi (–¥–ª—è NVIDIA‚Äë–≥—Ä–∞—Ñ–∏–∫–∏).
fn get_gpu_info() -> Result<Vec<GPUInfo>, Box<dyn std::error::Error>> {
    let output = Command::new("nvidia-smi")
        .args(&[
            "--query-gpu=name,memory.total,memory.used,memory.free,temperature.gpu",
            "--format=csv,noheader,nounits",
        ])
        .output();

    if let Ok(output) = output {
        if output.status.success() {
            let output_str = String::from_utf8_lossy(&output.stdout);
            let mut gpus = Vec::new();
            for line in output_str.lines() {
                let parts: Vec<&str> = line.split(',').map(|s| s.trim()).collect();
                if parts.len() == 5 {
                    let model = parts[0].to_string();
                    let total: f64 = parts[1].parse().unwrap_or(0.0);
                    let used: f64 = parts[2].parse().unwrap_or(0.0);
                    let free: f64 = parts[3].parse().unwrap_or(0.0);
                    let temperature: u32 = parts[4].parse().unwrap_or(0);
                    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏–∑ MB –≤ –ì–ë
                    gpus.push(GPUInfo {
                        model,
                        total_memory: Some(total / 1024.0),
                        used_memory: Some(used / 1024.0),
                        free_memory: Some(free / 1024.0),
                        temperature: Some(temperature),
                    });
                }
            }
            if !gpus.is_empty() {
                return Ok(gpus);
            }
        }
    }
    
    Err("nvidia-smi –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É".into())
}

#[cfg(target_os = "windows")]
fn get_integrated_gpu_model_windows() -> Result<String, Box<dyn std::error::Error>> {
    let output = Command::new("wmic")
        .args(&["path", "win32_VideoController", "get", "Name"])
        .output()?;
    if output.status.success() {
        let output_str = String::from_utf8_lossy(&output.stdout);
        let mut lines = output_str.lines();
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        lines.next();
        if let Some(name) = lines.next() {
            let name = name.trim();
            if !name.is_empty() {
                return Ok(name.to_string());
            }
        }
    }
    Err("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞".into())
}


#[cfg(target_os = "windows")]
fn get_cpu_integrated_gpu_model_windows() -> Result<String, Box<dyn std::error::Error>> {
    let output = Command::new("wmic")
        .args(&["path", "win32_VideoController", "get", "Name"])
        .output()?;
    let output_str = String::from_utf8_lossy(&output.stdout);
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    for line in output_str.lines().skip(1) {
        let name = line.trim();
        if !name.is_empty() &&
           (name.to_lowercase().contains("intel") ||
            name.to_lowercase().contains("amd") ||
            name.to_lowercase().contains("uhd"))
        {
            return Ok(name.to_string());
        }
    }
    Err("–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞".into())
}

#[cfg(target_os = "linux")]
fn get_cpu_integrated_gpu_model_linux() -> Result<String, Box<dyn std::error::Error>> {
    let output = Command::new("lspci").output()?;
    let output_str = String::from_utf8_lossy(&output.stdout);
    for line in output_str.lines() {
        if line.contains("VGA compatible controller") &&
           (line.to_lowercase().contains("intel") || line.to_lowercase().contains("amd"))
        {
            return Ok(line.to_string());
        }
    }
    Err("–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞".into())
}

#[cfg(target_os = "macos")]
fn get_cpu_integrated_gpu_model_macos() -> Result<String, Box<dyn std::error::Error>> {
    let output = Command::new("system_profiler")
        .args(&["SPDisplaysDataType"])
        .output()?;
    if output.status.success() {
        let output_str = String::from_utf8_lossy(&output.stdout);
        for line in output_str.lines() {
            if line.contains("Chipset Model:") {
                let model = line.trim().trim_start_matches("Chipset Model:").trim();
                if model.to_lowercase().contains("intel") ||
                   model.to_lowercase().contains("amd")
                {
                    return Ok(model.to_string());
                }
            }
        }
    }
    Err("–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞".into())
}



// ==================== Main ====================
fn main() {
    let mut sys = System::new_all();
    sys.refresh_all();
    
    println!("üî• –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞! –í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å —É–∑–Ω–∞—Ç—å: üî•");

    println!("\nüíª –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:");
    if let Some(cpu) = sys.cpus().first() {
        println!("   üè∑ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {}", cpu.brand());
        println!("   üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {:.2}%", cpu.cpu_usage());
        println!("   üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {:.2} –ì–ì—Ü", cpu.frequency() as f64 / 1000.0);
        println!("   ‚öôÔ∏è –ü—Ä–æ—Ü–µ—Å—Å–æ–≤: {}", sys.processes().len());
        println!("   üîÑ –ü–æ—Ç–æ–∫–æ–≤: {}", sys.cpus().len());
        println!("   ‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {} —Å–µ–∫", sys.uptime());
    }
    println!("   üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞:");
    for comp in sys.components() {
        if comp.label().to_lowercase().contains("cpu") {
            println!("     {}: {:.2}¬∞C", comp.label(), comp.temperature());
        }
    }

    println!("\nüõ† –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å:");
    println!("   üëÄ –í—Å–µ–≥–æ: {:.2} –ì–ë", sys.total_memory() as f64 / (1024.0 * 1024.0 * 1024.0));
    println!("   üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è: {:.2} –ì–ë", sys.used_memory() as f64 / (1024.0 * 1024.0 * 1024.0));
    println!("   üü¢ –î–æ—Å—Ç—É–ø–Ω–æ: {:.2} –ì–ë", sys.available_memory() as f64 / (1024.0 * 1024.0 * 1024.0));

    
    match get_ram_info() {
        Ok(mem_infos) => {
            if mem_infos.is_empty() {
                println!("   ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ");
                println!("   üß© –§–æ—Ä–º–∞—Ç: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ");
            } else {
                let mut speeds: Vec<String> = Vec::new();
                let mut formats: Vec<String> = Vec::new();
                for info in mem_infos {
                    if let Some(s) = info.speed {
                        speeds.push(format!("{} MHz", s));
                    }
                    if let Some(fmt) = info.memory_format {
                        formats.push(fmt);
                    }
                }
                if !speeds.is_empty() {
                    println!("   ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {}", speeds.join(", "));
                } else {
                    println!("   ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ");
                }
                if !formats.is_empty() {
                    println!("   üß© –§–æ—Ä–º–∞—Ç: {}", formats.join(", "));
                } else {
                    println!("   üß© –§–æ—Ä–º–∞—Ç: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ");
                }
            }
        },
        Err(e) => {
            println!("   ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ({})", e);
            println!("   üß© –§–æ—Ä–º–∞—Ç: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö");
        }
    }

    println!("\nüíæ –î–∏—Å–∫–∏:");
    for disk in sys.disks() {
        println!("   üìÄ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {:?}", disk.name());
        println!("   üíæ –ï–º–∫–æ—Å—Ç—å: {} –ì–ë", disk.total_space() / (1024 * 1024 * 1024));
        println!("   üÜì –°–≤–æ–±–æ–¥–Ω–æ: {} –ì–ë", disk.available_space() / (1024 * 1024 * 1024));
    }

    println!("\nüåê –°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:");
    for (interface_name, data) in sys.networks() {
        println!("   üîå –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {}", interface_name);
        println!("   üì° –û—Ç–ø—Ä–∞–≤–∫–∞: {} –ö–±–∏—Ç/—Å", data.total_transmitted() / 1024);
        println!("   üì• –ü–æ–ª—É—á–µ–Ω–∏–µ: {} –ö–±–∏—Ç/—Å", data.total_received() / 1024);
    }

    match local_ipaddress::get() {
        Some(ip) => println!("   üåç IPv4-–∞–¥—Ä–µ—Å: {}", ip),
        None => println!("   ‚ùå IPv4-–∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω."),
    }
    println!("   üåç IPv6-–∞–¥—Ä–µ—Å: (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è sysinfo)");

    // ==================== –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è GPU ====================
    println!("\nüéÆ –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞:");
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ–π GPU —á–µ—Ä–µ–∑ nvidia-smi
    if let Ok(gpus) = get_gpu_info() {
        for gpu in gpus {
            println!("   üè∑ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {}", gpu.model);
            if let Some(total) = gpu.total_memory {
                println!("   üéÆ –û–±—â–∏–π –æ–±—ä—ë–º –ø–∞–º—è—Ç–∏: {:.2} –ì–ë", total);
            } else {
                println!("   üéÆ –ö–æ–ª-–≤–æ –ø–∞–º—è—Ç–∏: (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)");
            }
            if let Some(used) = gpu.used_memory {
                println!("   üìä –í—ã–¥–µ–ª–µ–Ω–æ –ø–∞–º—è—Ç–∏: {:.2} –ì–ë", used);
            } else {
                println!("   üìä –í—ã–¥–µ–ª–µ–Ω–æ –ø–∞–º—è—Ç–∏: (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)");
            }
            if let Some(free) = gpu.free_memory {
                println!("   üÜì –û—Å—Ç–∞–ª–æ—Å—å: {:.2} –ì–ë", free);
            } else {
                println!("   üÜì –û—Å—Ç–∞–ª–æ—Å—å: (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)");
            }
            if let Some(temp) = gpu.temperature {
                println!("   üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {}¬∞C", temp);
            } else {
                println!("   üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)");
            }
        }
    } else {
        // –ï—Å–ª–∏ –¥–∏—Å–∫—Ä–µ—Ç–Ω–∞—è GPU –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–∏
        #[cfg(target_os = "windows")]
        {
            match get_integrated_gpu_model_windows() {
                Ok(model) => {
                    println!("   üè∑ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {}", model);
                    println!("   üéÆ –ö–æ–ª-–≤–æ –ø–∞–º—è—Ç–∏: (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)");
                    println!("   üìä –í—ã–¥–µ–ª–µ–Ω–æ –ø–∞–º—è—Ç–∏: (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)");
                    println!("   üÜì –û—Å—Ç–∞–ª–æ—Å—å: (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)");
                },
                Err(_) => println!("   ‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."),
            }
        }
        #[cfg(target_os = "linux")]
        {
            match get_integrated_gpu_model_linux() {
                Ok(model) => {
                    println!("   üè∑ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {}", model);
                    println!("   üéÆ –ö–æ–ª-–≤–æ –ø–∞–º—è—Ç–∏: (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)");
                    println!("   üìä –í—ã–¥–µ–ª–µ–Ω–æ –ø–∞–º—è—Ç–∏: (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)");
                    println!("   üÜì –û—Å—Ç–∞–ª–æ—Å—å: (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)");
                },
                Err(_) => println!("   ‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."),
            }
        }
        #[cfg(target_os = "macos")]
        {
            match get_cpu_integrated_gpu_model_macos() {
                Ok(model) => {
                    println!("   üè∑ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {}", model);
                    println!("   üéÆ –ö–æ–ª-–≤–æ –ø–∞–º—è—Ç–∏: (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)");
                    println!("   üìä –í—ã–¥–µ–ª–µ–Ω–æ –ø–∞–º—è—Ç–∏: (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)");
                    println!("   üÜì –û—Å—Ç–∞–ª–æ—Å—å: (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)");
                },
                Err(_) => println!("   ‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."),
            }
        }
    }

    // –ï—Å–ª–∏ –¥–∏—Å–∫—Ä–µ—Ç–Ω–∞—è GPU –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ
    #[cfg(target_os = "windows")]
    {
        match get_cpu_integrated_gpu_model_windows() {
            Ok(model) => {
                println!("   üè∑ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ (CPU): {}", model);
                println!("   üéÆ –ö–æ–ª-–≤–æ –ø–∞–º—è—Ç–∏: (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)");
                println!("   üìä –í—ã–¥–µ–ª–µ–Ω–æ –ø–∞–º—è—Ç–∏: (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)");
                println!("   üÜì –û—Å—Ç–∞–ª–æ—Å—å: (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)");
            },
            Err(e) => println!("   ‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–µ (CPU) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {}", e),
        }
    }

    #[cfg(target_os = "linux")]
    {
        match get_cpu_integrated_gpu_model_linux() {
            Ok(model) => {
                println!("   üè∑ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ (CPU): {}", model);
                println!("   üéÆ –ö–æ–ª-–≤–æ –ø–∞–º—è—Ç–∏: (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)");
                println!("   üìä –í—ã–¥–µ–ª–µ–Ω–æ –ø–∞–º—è—Ç–∏: (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)");
                println!("   üÜì –û—Å—Ç–∞–ª–æ—Å—å: (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)");
            },
            Err(e) => println!("   ‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–µ (CPU) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {}", e),
        }
    }

    #[cfg(target_os = "macos")]
    {
        match get_cpu_integrated_gpu_model_macos() {
            Ok(model) => {
                println!("   üè∑ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ (CPU): {}", model);
                println!("   üéÆ –ö–æ–ª-–≤–æ –ø–∞–º—è—Ç–∏: (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)");
                println!("   üìä –í—ã–¥–µ–ª–µ–Ω–æ –ø–∞–º—è—Ç–∏: (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)");
                println!("   üÜì –û—Å—Ç–∞–ª–æ—Å—å: (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)");
            },
            Err(e) => println!("   ‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–µ (CPU) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {}", e),
        }
    }

    println!("\n–ü—Ä–æ—Ü–µ—Å—Å—ã:");
    let mut processes: Vec<_> = sys.processes().iter().collect();
    processes.sort_by(|a, b| b.1.cpu_usage().partial_cmp(&a.1.cpu_usage()).unwrap());
    for (pid, process) in processes.iter().take(15) {
        let disk_usage = process.disk_usage();
        println!(
            "[{}] {}: {:.2}% CPU, {:.2} MB RAM, {:.2} KB —á—Ç–µ–Ω–∏–µ, {:.2} KB –∑–∞–ø–∏—Å—å",
            pid,
            process.name(),
            process.cpu_usage(),
            process.memory() as f64 / (1024.0 * 1024.0),
            disk_usage.total_read_bytes as f64 / (1024.0 * 1024.0),
            disk_usage.total_written_bytes as f64 / (1024.0 * 1024.0)
        );
    }

    println!("\n–°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–ª—É–∂–±—ã:");
    #[cfg(target_os = "windows")]
    {    
        let output = Command::new("powershell")
            .args(&[
                "-Command",
                "Get-CimInstance Win32_Service | Select-Object ProcessId, Name, Status | ConvertTo-Json -Compress"
            ])
            .output()
            .expect("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É PowerShell");
    
        if output.status.success() {
            let output_str = String::from_utf8_lossy(&output.stdout);
            let services: Vec<serde_json::Value> = serde_json::from_str(&output_str).expect("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON");
            for service in services {
                println!("   [{}] {}: {}", service["ProcessId"], service["Name"], service["Status"]);
            }
        } else {
            println!("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª—É–∂–±–∞—Ö.");
        }
    }

    #[cfg(target_os = "linux")]
    {
        let output = Command::new("systemctl")
            .args(&["list-units", "--type=service", "--no-pager", "--plain", "--no-legend"])
            .output()
            .expect("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É systemctl");
    
        if output.status.success() {
            let output_str = String::from_utf8_lossy(&output.stdout);
            for line in output_str.lines() {
                let parts: Vec<&str> = line.split_whitespace().collect();
                if parts.len() > 3 {
                    // PID –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –ø–æ—ç—Ç–æ–º—É –≤—ã–≤–æ–¥–∏–º [N/A]
                    println!("   [N/A] {}: {}", parts[0], parts[3]);
                }
            }
        } else {
            println!("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª—É–∂–±–∞—Ö.");
        }
    }

    #[cfg(target_os = "macos")]
    {
        let output = Command::new("launchctl")
            .args(&["list"])
            .output()
            .expect("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É launchctl");
        
        if output.status.success() {
            let output_str = String::from_utf8_lossy(&output.stdout);
            for line in output_str.lines().skip(1) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                let parts: Vec<&str> = line.split_whitespace().collect();
                if parts.len() > 2 {
                    println!("   [{}] {}:", parts[0], parts[2]);
                }
            }
        } else {
            println!("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª—É–∂–±–∞—Ö.");
        }
    }
    
    println!("\nüî• –í–°–Å, –°–ò–°–¢–ï–ú–ê –ü–†–û–ê–ù–ê–õ–ò–ó–ò–†–û–í–ê–ù–ê –ù–ê 100%! üöÄ");

    println!("\n–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É...");
    let mut input = String::new();
    io::stdin().read_line(&mut input).expect("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤–≤–æ–¥");
}

